-- MySQL Script generated by MySQL Workbench
-- Sun Jul  3 23:12:36 2022
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema Pizzeria
-- -----------------------------------------------------
-- Un cliente te ha contratado para diseñar una web que permita realizar pedidos de comida a domicilio por Internet.
-- 
-- Ten en cuenta las siguientes indicaciones para modelar cómo sería la base de datos del proyecto: Para cada cliente almacenamos un identificador único, nombre, apellidos, dirección, código postal, localidad, provincia y número de teléfono. Los datos de localidad y provincia estarán almacenados en tablas separadas. Sabemos que una localidad pertenece a una única provincia, y que una provincia puede tener muchas localidades. Para cada localidad almacenamos un identificador único y un nombre. En cada provincia almacenamos un identificador único y un nombre.
-- 
-- Un cliente puede realizar muchos pedidos, pero un único pedido sólo puede ser realizado por un único cliente. De cada pedido se almacena un identificador único, fecha/hora, si el pedido es para reparto a domicilio o para recogerlo en tienda, la cantidad de productos que se han seleccionado de cada tipo y el precio total. Un pedido puede constar de uno o varios productos.
-- 
-- Los productos pueden ser pizzas, hamburguesas y bebidas. De cada producto se almacena: un identificador único, nombre, descripción, imagen y precio. En el caso de las pizzas existen diversas categorías que pueden cambiar de nombre a lo largo del año. Una pizza sólo puede estar dentro de una categoría, pero una categoría puede tener muchas pizzas.
-- 
-- De cada categoría se almacena un identificador único y un nombre. Un pedido es gestionado por una única tienda y una tienda puede manejar muchos pedidos. De cada tienda se almacena un identificador único, dirección, código postal, localidad y provincia. En una tienda puede trabajar muchos empleados y un empleado sólo puede trabajar en una tienda. De cada empleado se almacena un identificador único, nombre, apellidos, nif, teléfono y si trabaja como cocinero o repartidor. Para los pedidos de reparto a domicilio interesa guardar quién es el repartidor que realiza la entrega del pedido y la fecha/hora del momento de la entrega.
-- Nivel 2
-- - Ejercicio 1 - Youtube
-- Trataremos de hacer un modelo sencillo de cómo sería la base de datos para una versión reducida de YouTube.
-- 
-- De cada usuario guardamos un identificador único, email, password, nombre de usuario, fecha de nacimiento, sexo, país, código postal. Un usuario publica vídeos. De cada vídeo guardamos un identificador único, un título, una descripción, un tamaño, el nombre del archivo de vídeo, duración del vídeo, un thumbnail, el número de reproducciones, el número de likes, el número de dislikes.
-- 
-- Un vídeo puede tener tres estados distintos: público, oculto y privado. Un vídeo puede tener muchas etiquetas. Una etiqueta se identifica por un Identificador único y un nombre de etiqueta. Interesa guardar quién es el usuario que publica el vídeo y en qué fecha/hora lo hace. Un usuario puede crear un canal. Un canal tiene un identificador único, un nombre, una descripción y una fecha de creación. Un usuario puede suscribirse a los canales de otros usuarios. Un usuario puede darle un like o un dislike a un vídeo una única vez. Habrá que llevar un registro de los usuarios que le han dado like y dislike a un determinado vídeo y en qué fecha/hora lo hicieron. Un usuario puede crear playlists con los vídeos que le gustan. Cada playlist tiene un identificador único, un nombre, una fecha de creación, y un estado que indica que puede ser pública o privada. Un usuario puede escribir comentarios en un vídeo determinado.
-- 
-- Cada comentario está identificado por un identificador único, el texto del comentario y la fecha/hora en la que se realizó. Un usuario puede marcar un comentario como me gusta o no me gusta. Habrá que llevar un registro de los usuarios que han marcado un comentario como me gusta/no me gusta, y en qué fecha/hora lo hicieron.

-- -----------------------------------------------------
-- Schema Pizzeria
--
-- Un cliente te ha contratado para diseñar una web que permita realizar pedidos de comida a domicilio por Internet.
-- 
-- Ten en cuenta las siguientes indicaciones para modelar cómo sería la base de datos del proyecto: Para cada cliente almacenamos un identificador único, nombre, apellidos, dirección, código postal, localidad, provincia y número de teléfono. Los datos de localidad y provincia estarán almacenados en tablas separadas. Sabemos que una localidad pertenece a una única provincia, y que una provincia puede tener muchas localidades. Para cada localidad almacenamos un identificador único y un nombre. En cada provincia almacenamos un identificador único y un nombre.
-- 
-- Un cliente puede realizar muchos pedidos, pero un único pedido sólo puede ser realizado por un único cliente. De cada pedido se almacena un identificador único, fecha/hora, si el pedido es para reparto a domicilio o para recogerlo en tienda, la cantidad de productos que se han seleccionado de cada tipo y el precio total. Un pedido puede constar de uno o varios productos.
-- 
-- Los productos pueden ser pizzas, hamburguesas y bebidas. De cada producto se almacena: un identificador único, nombre, descripción, imagen y precio. En el caso de las pizzas existen diversas categorías que pueden cambiar de nombre a lo largo del año. Una pizza sólo puede estar dentro de una categoría, pero una categoría puede tener muchas pizzas.
-- 
-- De cada categoría se almacena un identificador único y un nombre. Un pedido es gestionado por una única tienda y una tienda puede manejar muchos pedidos. De cada tienda se almacena un identificador único, dirección, código postal, localidad y provincia. En una tienda puede trabajar muchos empleados y un empleado sólo puede trabajar en una tienda. De cada empleado se almacena un identificador único, nombre, apellidos, nif, teléfono y si trabaja como cocinero o repartidor. Para los pedidos de reparto a domicilio interesa guardar quién es el repartidor que realiza la entrega del pedido y la fecha/hora del momento de la entrega.
-- Nivel 2
-- - Ejercicio 1 - Youtube
-- Trataremos de hacer un modelo sencillo de cómo sería la base de datos para una versión reducida de YouTube.
-- 
-- De cada usuario guardamos un identificador único, email, password, nombre de usuario, fecha de nacimiento, sexo, país, código postal. Un usuario publica vídeos. De cada vídeo guardamos un identificador único, un título, una descripción, un tamaño, el nombre del archivo de vídeo, duración del vídeo, un thumbnail, el número de reproducciones, el número de likes, el número de dislikes.
-- 
-- Un vídeo puede tener tres estados distintos: público, oculto y privado. Un vídeo puede tener muchas etiquetas. Una etiqueta se identifica por un Identificador único y un nombre de etiqueta. Interesa guardar quién es el usuario que publica el vídeo y en qué fecha/hora lo hace. Un usuario puede crear un canal. Un canal tiene un identificador único, un nombre, una descripción y una fecha de creación. Un usuario puede suscribirse a los canales de otros usuarios. Un usuario puede darle un like o un dislike a un vídeo una única vez. Habrá que llevar un registro de los usuarios que le han dado like y dislike a un determinado vídeo y en qué fecha/hora lo hicieron. Un usuario puede crear playlists con los vídeos que le gustan. Cada playlist tiene un identificador único, un nombre, una fecha de creación, y un estado que indica que puede ser pública o privada. Un usuario puede escribir comentarios en un vídeo determinado.
-- 
-- Cada comentario está identificado por un identificador único, el texto del comentario y la fecha/hora en la que se realizó. Un usuario puede marcar un comentario como me gusta o no me gusta. Habrá que llevar un registro de los usuarios que han marcado un comentario como me gusta/no me gusta, y en qué fecha/hora lo hicieron.
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `Pizzeria` DEFAULT CHARACTER SET utf8 ;
USE `Pizzeria` ;

-- -----------------------------------------------------
-- Table `Pizzeria`.`provincia`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Pizzeria`.`provincia` (
  `id_provincia` INT NOT NULL AUTO_INCREMENT,
  `provincia_nombre` VARCHAR(45) NOT NULL COMMENT 'Nombre de provincia',
  PRIMARY KEY (`id_provincia`),
  UNIQUE INDEX `id_provincia_UNIQUE` (`id_provincia` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Pizzeria`.`localidad`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Pizzeria`.`localidad` (
  `id_localidad` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador único',
  `localidad_nombre` VARCHAR(45) NOT NULL COMMENT 'Nombre localidad',
  `provincia_id_provincia` INT NOT NULL,
  PRIMARY KEY (`id_localidad`, `provincia_id_provincia`),
  UNIQUE INDEX `id_localidad_UNIQUE` (`id_localidad` ASC) VISIBLE,
  INDEX `fk_localidad_provincia1_idx` (`provincia_id_provincia` ASC) VISIBLE,
  CONSTRAINT `fk_localidad_provincia1`
    FOREIGN KEY (`provincia_id_provincia`)
    REFERENCES `Pizzeria`.`provincia` (`id_provincia`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Pizzeria`.`cliente`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Pizzeria`.`cliente` (
  `id_cliente` INT NOT NULL AUTO_INCREMENT,
  `cliente_nombre` VARCHAR(30) NOT NULL COMMENT 'Nombre del Cliente',
  `cliente_apellido` VARCHAR(45) NOT NULL COMMENT 'Apellido del Cliente',
  `cliente_direccion` VARCHAR(45) NOT NULL COMMENT 'Direccion completa del cliente (calle, número, piso, puerta)',
  `cliente_cp` VARCHAR(5) NOT NULL COMMENT 'Código Postal del cliente',
  `cliente_telefono` VARCHAR(12) NOT NULL COMMENT 'Número de teléfono del cliente.',
  `localidad_id_localidad` INT NOT NULL,
  PRIMARY KEY (`id_cliente`),
  UNIQUE INDEX `id_cliente_UNIQUE` (`id_cliente` ASC) VISIBLE,
  INDEX `fk_cliente_localidad1_idx` (`localidad_id_localidad` ASC) VISIBLE,
  CONSTRAINT `fk_cliente_localidad1`
    FOREIGN KEY (`localidad_id_localidad`)
    REFERENCES `Pizzeria`.`localidad` (`id_localidad`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Pizzeria`.`tienda`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Pizzeria`.`tienda` (
  `id_Tienda` INT NOT NULL AUTO_INCREMENT,
  `direccion` TEXT(100) NULL DEFAULT 'Null',
  `cp` INT(5) NOT NULL,
  `Tienda_col` VARCHAR(45) NOT NULL,
  `localidad_id_localidad` INT NOT NULL,
  PRIMARY KEY (`id_Tienda`),
  INDEX `fk_tienda_localidad1_idx` (`localidad_id_localidad` ASC) VISIBLE,
  CONSTRAINT `fk_tienda_localidad1`
    FOREIGN KEY (`localidad_id_localidad`)
    REFERENCES `Pizzeria`.`localidad` (`id_localidad`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Pizzeria`.`pedido`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Pizzeria`.`pedido` (
  `id_pedido` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador único',
  `pedido_fecha_hora` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `pedido` ENUM('Domicilio', 'Recoger') NOT NULL,
  `cant_pizza` INT NULL DEFAULT NULL,
  `cant_hamburguesas` INT NULL DEFAULT NULL,
  `cant_bebida` INT NULL DEFAULT NULL,
  `precio_total` DECIMAL NOT NULL,
  `cliente_id_cliente` INT NOT NULL,
  `tienda_id_Tienda` INT NOT NULL,
  PRIMARY KEY (`id_pedido`),
  INDEX `fk_pedido_cliente1_idx` (`cliente_id_cliente` ASC) VISIBLE,
  INDEX `fk_pedido_tienda1_idx` (`tienda_id_Tienda` ASC) VISIBLE,
  CONSTRAINT `fk_pedido_cliente1`
    FOREIGN KEY (`cliente_id_cliente`)
    REFERENCES `Pizzeria`.`cliente` (`id_cliente`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_pedido_tienda1`
    FOREIGN KEY (`tienda_id_Tienda`)
    REFERENCES `Pizzeria`.`tienda` (`id_Tienda`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Pizzeria`.`categoria_pizza`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Pizzeria`.`categoria_pizza` (
  `id_categoria_pizza` INT NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id_categoria_pizza`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Pizzeria`.`pizza`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Pizzeria`.`pizza` (
  `id_pizza` INT NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(45) NOT NULL,
  `Ingredientes` TEXT NOT NULL,
  `Imagen` VARCHAR(45) NOT NULL,
  `precio` DECIMAL NOT NULL,
  `categoria_pizza_id_categoria_pizza` INT NOT NULL,
  PRIMARY KEY (`id_pizza`),
  INDEX `fk_pizza_categoria_pizza1_idx` (`categoria_pizza_id_categoria_pizza` ASC) VISIBLE,
  CONSTRAINT `fk_pizza_categoria_pizza1`
    FOREIGN KEY (`categoria_pizza_id_categoria_pizza`)
    REFERENCES `Pizzeria`.`categoria_pizza` (`id_categoria_pizza`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Pizzeria`.`hamburguesa`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Pizzeria`.`hamburguesa` (
  `id_hamburgueza` INT NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(45) NOT NULL,
  `Ingredientes` TEXT NOT NULL,
  `Imagen` VARCHAR(45) NOT NULL,
  `precio_hamburguesa` DECIMAL NOT NULL,
  PRIMARY KEY (`id_hamburgueza`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Pizzeria`.`bebidas`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Pizzeria`.`bebidas` (
  `id_bebidas` INT NOT NULL AUTO_INCREMENT,
  `nombre_bebida` VARCHAR(45) NOT NULL,
  `descripción` TEXT NOT NULL,
  `Imagen` VARCHAR(45) NOT NULL,
  `precio` DECIMAL NOT NULL,
  PRIMARY KEY (`id_bebidas`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Pizzeria`.`pedido_has_pizza`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Pizzeria`.`pedido_has_pizza` (
  `pedido_id_pedido` INT NOT NULL,
  `pizza_id_pizza` INT NOT NULL,
  `hamburguesa_id_hamburgueza` INT NOT NULL,
  `bebidas_id_bebidas` INT NOT NULL,
  PRIMARY KEY (`pedido_id_pedido`, `pizza_id_pizza`, `hamburguesa_id_hamburgueza`, `bebidas_id_bebidas`),
  INDEX `fk_pedido_has_pizza_pizza1_idx` (`pizza_id_pizza` ASC) VISIBLE,
  INDEX `fk_pedido_has_pizza_pedido1_idx` (`pedido_id_pedido` ASC) VISIBLE,
  INDEX `fk_pedido_has_pizza_hamburguesa1_idx` (`hamburguesa_id_hamburgueza` ASC) VISIBLE,
  INDEX `fk_pedido_has_pizza_bebidas1_idx` (`bebidas_id_bebidas` ASC) VISIBLE,
  CONSTRAINT `fk_pedido_has_pizza_pedido1`
    FOREIGN KEY (`pedido_id_pedido`)
    REFERENCES `Pizzeria`.`pedido` (`id_pedido`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_pedido_has_pizza_pizza1`
    FOREIGN KEY (`pizza_id_pizza`)
    REFERENCES `Pizzeria`.`pizza` (`id_pizza`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_pedido_has_pizza_hamburguesa1`
    FOREIGN KEY (`hamburguesa_id_hamburgueza`)
    REFERENCES `Pizzeria`.`hamburguesa` (`id_hamburgueza`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_pedido_has_pizza_bebidas1`
    FOREIGN KEY (`bebidas_id_bebidas`)
    REFERENCES `Pizzeria`.`bebidas` (`id_bebidas`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Pizzeria`.`empleado`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Pizzeria`.`empleado` (
  `id_empleado` INT NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(45) NOT NULL,
  `NIF` VARCHAR(45) NOT NULL,
  `telefono` INT NOT NULL,
  `tipo` ENUM('Cocinero', 'Repartidor') NOT NULL,
  `tienda_id_Tienda` INT NOT NULL,
  PRIMARY KEY (`id_empleado`),
  INDEX `fk_empleado_tienda1_idx` (`tienda_id_Tienda` ASC) VISIBLE,
  CONSTRAINT `fk_empleado_tienda1`
    FOREIGN KEY (`tienda_id_Tienda`)
    REFERENCES `Pizzeria`.`tienda` (`id_Tienda`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Pizzeria`.`domicilio`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Pizzeria`.`domicilio` (
  `fecha_hora_entrega` DATETIME NULL DEFAULT CURRENT_TIMESTAMP  ON  UPDATE  CURRENT_TIMESTAMP,
  `pedido_id_pedido` INT NOT NULL,
  `empleado_id_empleado` INT NOT NULL,
  PRIMARY KEY (`pedido_id_pedido`, `empleado_id_empleado`),
  INDEX `fk_domicilio_empleado1_idx` (`empleado_id_empleado` ASC) VISIBLE,
  CONSTRAINT `fk_domicilio_pedido1`
    FOREIGN KEY (`pedido_id_pedido`)
    REFERENCES `Pizzeria`.`pedido` (`id_pedido`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_domicilio_empleado1`
    FOREIGN KEY (`empleado_id_empleado`)
    REFERENCES `Pizzeria`.`empleado` (`id_empleado`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
